# @Version: 1.2# @Author: fd# @Time: 2025/10/08import sys, osimport pandas as pdfrom datetime import datetime, timedelta, date, timefrom PyQt6.QtWidgets import (    QApplication, QWidget, QVBoxLayout, QPushButton, QTextEdit, QFileDialog, QLabel, QHBoxLayout, QTreeWidget, QTreeWidgetItem)from PyQt6.QtGui import QIcon, QColor, QBrushfrom PyQt6.QtCore import QtRESOURCE_PATHS = {    "icon": "note.ico",    "stylesheet": "light.qss"}def resource_path(relative_path):    # 获取打包后的资源路径（PyInstaller 兼容）    if hasattr(sys, '_MEIPASS'):        return os.path.join(sys._MEIPASS, relative_path)    return os.path.abspath(relative_path)def load_stylesheet():    # 加载样式表（只加载一次）    try:        with open(resource_path(RESOURCE_PATHS["stylesheet"]), "r", encoding="utf-8") as f:            return f.read()    except Exception:        return ""# 预加载样式表STYLESHEET = load_stylesheet()def force_datetime(x):    """将各种时间类型统一转成 datetime"""    if pd.isna(x):        return pd.NaT    if isinstance(x, datetime):        return x    if isinstance(x, time):        return datetime.combine(date.today(), x)    try:        return pd.to_datetime(x)    except Exception:        return pd.NaTclass DailyReportApp(QWidget):    def __init__(self):        super().__init__()        self.setWindowTitle("日报生成器")        self.resize(700, 600)        self.setMinimumSize(500, 400)        self.setWindowIcon(QIcon(resource_path(RESOURCE_PATHS["icon"])))        layout = QVBoxLayout(self)        top_area = QHBoxLayout()        layout.addLayout(top_area)        self.btn_select = QPushButton("选择文件")        self.btn_select.setMaximumWidth(120)        self.btn_select.clicked.connect(self.select_file)        top_area.addWidget(self.btn_select)        self.label = QLabel("请选择 Excel 文件：")        top_area.addWidget(self.label)        # QTreeWidget 显示报告        content_area = QHBoxLayout()        layout.addLayout(content_area)        self.daily_tree = QTreeWidget()        self.daily_tree.setColumnCount(1)        self.daily_tree.header().hide()        content_area.addWidget(self.daily_tree)        self.summary_tree = QTreeWidget()        self.summary_tree.setColumnCount(1)        self.summary_tree.header().hide()        content_area.addWidget(self.summary_tree)        self.file_path = None        self.daily_tree.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)        self.daily_tree.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)        self.summary_tree.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)        self.summary_tree.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)        def enable_click_expand(tree: QTreeWidget):            def on_item_clicked(item: QTreeWidgetItem):                if item.childCount() > 0:                    # 如果节点已展开，则折叠；否则展开                    item.setExpanded(not item.isExpanded())            tree.itemClicked.connect(on_item_clicked)        # 调用        enable_click_expand(self.summary_tree)        enable_click_expand(self.daily_tree)    def select_file(self):        """选择 Excel 文件并自动生成日报"""        file_name, _ = QFileDialog.getOpenFileName(            self, "选择 Excel 文件", "", "Excel Files (*.xlsx *.xls)"        )        if not file_name:            return        self.file_path = file_name        self.label.setText(f"已选择文件：{file_name}")        self.summary_tree.clear()        self.label.setText("正在生成日报，请稍候...")        try:            self._report_content(file_name)            self.label.setText(f"文件：{file_name}，生成成功！")        except Exception as e:            self.label.setText(f"文件：{file_name}，生成失败：{str(e)}")        QApplication.processEvents()  # 刷新界面    def _report_content(self, data_file):        report_dict = {}        """读取 Excel 并生成日报内容，返回文本列表"""        df_data = pd.read_excel(data_file, sheet_name="1-工单状态明细")        df_shift = pd.read_excel(data_file, sheet_name="班次时间")        # 转换时间列为 datetime        for col in ["开始时间", "结束时间"]:            df_data[col] = df_data[col].apply(force_datetime)            df_shift[col] = df_shift[col].apply(force_datetime)        df_data["持续时长min"] = df_data["持续时长min"].round(2)        # 遍历记录        for idx, row in df_data.iterrows():            date_str = str(row["日期"])            emp = row["姓名"]            shift = row["班次"]            status = row["状态"]            start_t = row["开始时间"]            end_t = row["结束时间"]            dur = row["持续时长min"]            if pd.isna(start_t) or pd.isna(end_t) or pd.isna(shift) or pd.isna(date_str):                continue            shift_row = df_shift[df_shift["班次"] == shift]            if shift_row.empty:                continue            shift_start = shift_row.iloc[0]["开始时间"]            shift_end = shift_row.iloc[0]["结束时间"]            if shift_end < shift_start:                shift_end += timedelta(days=1)            # 将班次时间移到同一天的时间线上            shift_start = datetime.combine(start_t.date(), shift_start.time())            shift_end = datetime.combine(start_t.date(), shift_end.time())            if shift_end < shift_start:                shift_end += timedelta(days=1)            if status == "小休" and start_t >= shift_end:                continue            if date_str not in report_dict:                report_dict[date_str] = {                    "meal": {},                    "break_sum": {},                    "break_once": {},                    "break_shift": {}                }            # 用餐统计            if status == "就餐":                report_dict[date_str]["meal"][emp] = report_dict[date_str]["meal"].get(emp, 0) + dur            # 小休总时长            if status == "小休":                report_dict[date_str]["break_sum"][emp] = report_dict[date_str]["break_sum"].get(emp, 0) + dur            # 单次小休超过8分钟            if status == "小休" and dur > 8:                report_dict[date_str]["break_once"][emp] = report_dict[date_str]["break_once"].get(emp, 0) + 1            # 首尾半小时小休            if status == "小休":                if (shift_start < start_t < shift_start + timedelta(minutes=30)) or \                        (shift_end - timedelta(minutes=30) < start_t < shift_end):                    report_dict[date_str]["break_shift"][emp] = report_dict[date_str]["break_shift"].get(emp, 0) + 1        # 清空树        self.daily_tree.clear()        # 生成树节点        for date_str in sorted(report_dict.keys()):            day_item = QTreeWidgetItem(self.daily_tree)            day_item.setText(0, f"{date_str}")            # 用餐            meal_dict = report_dict[date_str]["meal"]            meal_over = {k: v for k, v in meal_dict.items() if v > 46}            meal_item = QTreeWidgetItem(day_item)            if not meal_over:                meal_item.setText(0, "用餐时长：全员遵时")            else:                meal_item.setText(0, f"用餐时长：{len(meal_over)}人超时")                for k, v in meal_over.items():                    sub = QTreeWidgetItem(meal_item)                    sub.setText(0, f"{k}：{v:.1f} 分钟")                    sub.setForeground(0, QBrush(QColor("#ED856E")))            # 小休总时长            break_sum_dict = report_dict[date_str]["break_sum"]            break_over = {k: v for k, v in break_sum_dict.items() if v > 61}            break_item = QTreeWidgetItem(day_item)            if not break_over:                break_item.setText(0, "小休总时长：全员遵时")            else:                break_item.setText(0, f"小休总时长：{len(break_over)}人超时")                for k, v in break_over.items():                    sub = QTreeWidgetItem(break_item)                    sub.setText(0, f"{k}：{v:.1f} 分钟")                    sub.setForeground(0, QBrush(QColor("#ED856E")))            # 单次小休            break_once_dict = report_dict[date_str]["break_once"]            once_item = QTreeWidgetItem(day_item)            if not break_once_dict:                once_item.setText(0, "单次小休：全员遵时")            else:                sorted_once = sorted(break_once_dict.items(), key=lambda x: x[1], reverse=True)                total_people = len(sorted_once)                total_times = sum(v for _, v in sorted_once)                once_item.setText(0, f"单次小休：{total_people}人超时，共{total_times}次")                top_cnt = sorted_once[0][1]                top_names = [k for k, v in sorted_once if v == top_cnt]                top_sub = QTreeWidgetItem(once_item)                top_sub.setText(0, f"小休超时Top：{', '.join(top_names)} {top_cnt}次")                top_sub.setForeground(0, QBrush(QColor("#ED856E")))                for k, v in sorted_once:                    sub = QTreeWidgetItem(once_item)                    sub.setText(0, f"{k}：{v} 次")                    sub.setForeground(0, QBrush(QColor("#ED856E")))            # 首尾半小时小休            break_shift_dict = report_dict[date_str]["break_shift"]            shift_item = QTreeWidgetItem(day_item)            if not break_shift_dict:                shift_item.setText(0, "首尾半小时小休：全员遵时")            else:                sorted_shift = sorted(break_shift_dict.items(), key=lambda x: x[1], reverse=True)                total_people = len(sorted_shift)                total_times = sum(v for _, v in sorted_shift)                shift_item.setText(0, f"首尾半小时小休：{total_people}人，共{total_times}次")                for k, v in sorted_shift:                    sub = QTreeWidgetItem(shift_item)                    sub.setText(0, f"{k}：{v} 次")                    sub.setForeground(0, QBrush(QColor("#ED856E")))            day_item.setExpanded(False)  # 默认折叠        self.daily_tree.expandToDepth(0)        # 生成 summary 树        self.summary_tree.clear()        if report_dict:            dates = sorted(report_dict.keys())            start_date = dates[0]            end_date = dates[-1]            root_item = QTreeWidgetItem(self.summary_tree)            root_item.setText(0, f"日期范围：{start_date} - {end_date}")            # 用餐统计            meal_total = {}            for day in report_dict.values():                for k, v in day.get("meal", {}).items():                    if v > 46:                        meal_total[k] = meal_total.get(k, 0) + 1            meal_item = QTreeWidgetItem(root_item)            if not meal_total:                meal_item.setText(0, "用餐时长：全员遵时")            else:                meal_item.setText(0, f"用餐时长：{len(meal_total)}人超时，共{sum(meal_total.values())}次")                for k, v in sorted(meal_total.items(), key=lambda x: x[1], reverse=True):                    sub = QTreeWidgetItem(meal_item)                    sub.setText(0, f"{k}：{v} 次")                    sub.setForeground(0, QBrush(QColor("#ED856E")))            # 小休总时长            break_total = {}            for day in report_dict.values():                for k, v in day.get("break_sum", {}).items():                    if v > 61:                        break_total[k] = break_total.get(k, 0) + 1            break_item = QTreeWidgetItem(root_item)            if not break_total:                break_item.setText(0, "小休总时长：全员遵时")            else:                break_item.setText(0, f"小休总时长：{len(break_total)}人超时，共{sum(break_total.values())}次")                for k, v in sorted(break_total.items(), key=lambda x: x[1], reverse=True):                    sub = QTreeWidgetItem(break_item)                    sub.setText(0, f"{k}：{v} 次")                    sub.setForeground(0, QBrush(QColor("#ED856E")))            # 单次小休            once_total = {}            for day in report_dict.values():                for k, v in day.get("break_once", {}).items():                    once_total[k] = once_total.get(k, 0) + v            once_item = QTreeWidgetItem(root_item)            if not once_total:                once_item.setText(0, "单次小休：全员遵时")            else:                once_item.setText(0, f"单次小休：{len(once_total)}人超时，共{sum(once_total.values())}次")                for k, v in sorted(once_total.items(), key=lambda x: x[1], reverse=True):                    sub = QTreeWidgetItem(once_item)                    sub.setText(0, f"{k}：{v} 次")                    sub.setForeground(0, QBrush(QColor("#ED856E")))            # 首尾半小时小休            shift_total = {}            for day in report_dict.values():                for k, v in day.get("break_shift", {}).items():                    shift_total[k] = shift_total.get(k, 0) + v            shift_item = QTreeWidgetItem(root_item)            if not shift_total:                shift_item.setText(0, "首尾半小时小休：全员遵时")            else:                shift_item.setText(0, f"首尾半小时小休：{len(shift_total)}人，共{sum(shift_total.values())}次")                for k, v in sorted(shift_total.items(), key=lambda x: x[1], reverse=True):                    sub = QTreeWidgetItem(shift_item)                    sub.setText(0, f"{k}：{v} 次")                    sub.setForeground(0, QBrush(QColor("#ED856E")))            root_item.setExpanded(False)            self.summary_tree.expandToDepth(0)if __name__ == "__main__":    app = QApplication(sys.argv)    app.setStyleSheet(STYLESHEET)    window = DailyReportApp()    window.show()    sys.exit(app.exec())